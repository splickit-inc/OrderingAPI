<?php
/*
Tonic: A simple RESTful Web publishing and development system
Copyright (C) 2007 Paul James <paul@peej.co.uk>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// $Id: response.php 36 2008-01-15 22:39:21Z peejeh $

/**
 * Models the outgoing HTTP response from the server.
 * @package Tonic/Lib
 * @version $Revision: 36 $
 */
class Response
{
	
	/**
	 * The HTTP status code
	 */
	var $statusCode;
	
	/**
	 * HTTP response headers generated by the resource
	 * @var str[]
	 */
	var $headers;
	
	/**
	 * HTTP response body
	 * @var str
	 */
	var $body;
	
	/**
	 * The resource that generated this response
	 * @var Resource
	 */
	var $resource;
	
	var $messages = array(
		200 => 'OK',
		201 => 'Created',
		204 => 'No Content',
		206 => 'Partial Content',
		301 => 'Moved Permanently',
		302 => 'Found',
		303 => 'See Other',
		304 => 'Not Modified',
		307 => 'Temporary Redirect',
		400 => 'Bad Request',
		401 => 'Unauthorized',
		403 => 'Forbidden',
		404 => 'Not Found',
		405 => 'Method Not Allowed',
		406 => 'Not Acceptable',
		410 => 'Gone',
		411 => 'Length Required',
		412 => 'Precondition Failed',
		415 => 'Unsupported Media Type',
		500 => 'Internal Server Error'
	);
	
	/**
	 * @param int statusCode
	 * @param str body
	 * @param str[] headers
	 */
	function response($statusCode = 200, $body = NULL, $headers = array())
	{
		$this->statusCode = $statusCode;
		$this->headers = $headers;
		$this->body = $body;
	}
	
	static function respond200OkAndDie()
	{
		$response = new Response(200);
		$response->output();
		die();	
	}

	/**
	 * Set the default response headers. The response headers set are
	 * <ul>
	 * <li>Tonic advert header</li>
	 * <li>Etag header</li>
	 * <li>Last modified header</li>
	 * <li>Cache control header</li>
	 * <li>Content encoding header</li>
	 * <ul>
	 * @param Resource resource
	 * @param Request request
	 */
	function setDefaultHeaders(&$resource, &$request)
	{
		//$this->headers['X-Powered-By'] = 'Tonic';
		if (substr($this->statusCode, 0, 1) == '2') { // only if we're sending a positive reply
			$mimetype = $resource->mimetype;
			if ($mimetype == 'text' && substr_count($request->url,'starmicros') > 0) {
			    // need to use text plain for starmicros calls
			    $mimetype = 'text/plain';
            }
			if (isset($resource->_resource)) { // we're got a sub-resource that is the real resource
				$resource =& $resource->_resource;
				// this broke shit ****** arosenthal ******
				//if (validateThatStringFieldIsSetAndIsNotNullAndIsNotEmptyOnResource($resource, 'mimetype')) {
				//	$mimetype = $resource->mimetype;
				//}
			}
			if (isset($resource->cacheControl) && $resource->cacheControl == 0) {
				$this->headers['Cache-Control'] = 'max-age=0, must-revalidate';
			} else {
				if ($etag = $resource->entityTag()) {
					$this->headers['Etag'] = '"'.$etag.'"';
				}
				if ($resource->modified) {
					$this->headers['Last-Modified'] = date('r', $resource->modified);
				} else {
					$this->headers['Last-Modified'] = date('r', time());
				}
				if (isset($resource->cacheControl)) {
					$this->headers['Cache-Control'] = 'max-age='.$resource->cacheControl.', must-revalidate';
				} else {
					$this->headers['Cache-Control'] = 'max-age=86400, must-revalidate';
				}
			}
			if ($request->encoding && $this->body) 
			{
				
				if ($_SERVER['log_level'] > 1) 
					myerror_log("the body length at line 129 in response.php is: ".strlen($this->body));
				if (substr_count($request->url,'/gprs/f2.txt') > 0)
				{
					// so first we try with nothing, then we'll try the new code
					; //doing nothing, see what apache does with it.  results:  nothing.
					//*
					
					myerror_log("********* starting the NEW  f2 gprs code for firmware 7.0  **********");
					$original_size = strlen($this->body);
					myerror_log("the body length going into GPRS stuff in response.php: ".$original_size);
					$heads = getallheaders();
					if ($range = $heads['RANGE'])
						;//
					else if (isLaptop() && isset($request->data['custom_range']))
					{
						// this is for unit testing
						$heads['RANGE'] = $request->data['custom_range'];
						$range = $request->data['custom_range'];
					}
					else
					{
						myerror_log("ERROR!  no RANGE header sent, re-setting to default of bytes=0-1023");
						$range = 'bytes=0-1023';
						if ($request->data['upper_range'])
							$range = 'bytes=0-'.$request->data['upper_range'];
					}
					$r = explode('=', $range);
					$range_value = $r[1];
					myerror_log("the range value from the printer is: ".$range_value);
					$rs = explode('-',$range_value);
					if ($range_value == '0-1023' )
					{
						myerror_log("in the range 0-1023");
						$upper_range_value = '1023';
						if (strlen($this->body) > 1024)
						{
							$this->body = substr($this->body,0,1024);
						}
						else
						{
							$upper_range_value = strlen($this->body)-1;
							//$total_size = strlen($this->body);
						}
					} else if ($rs[0] == 0) {
						myerror_log("in the second block where range starts with 0.  we have a funny range like 0-109");
						// we have a funny range like 0-109 
						$upper_range_value = $rs[1];
						//just need to trim to rs[1] 
						if (strlen($this->body) > $rs[1])
							$this->body = substr($this->body,0,$rs[1]);
						else
							$upper_range_value = strlen($this->body)-1;
					} else {
						$start = $rs[0];
						$upper_range_value = $rs[1];
						if ($upper_range_value > $original_size)
							$upper_range_value = $original_size - 1;
						myerror_log("in the else block meaning we have a second part of the message");
						myerror_log("about to split message starting at character: ".$start);
						
						$this->body = substr($this->body,$start,1024);
						myerror_log("the next part of the message trimmed is: ".$this->body);
						myerror_log("the total size is: ".$original_size);
					}
					//$upper_range_value = $upper_range_value-1;
					//$this->headers['Content-Range'] = 'bytes '.$rs[0].'-'.$upper_range_value.'/'.strlen($this->body);
					$this->headers['Content-Range'] = 'bytes '.$rs[0].'-'.$upper_range_value.'/'.$original_size;
					unset($this->headers['Etag']);
					unset($this->headers['Last-Modified']);
					$this->headers['Cache-Control'] = 'private';
					//*/
				}
				else if ((substr_count($request->url,'/gprs/') > 0) && (substr_count($request->url,'/getnextmessagebymerchantid/') > 0 || substr_count($request->url,'/m/g/') > 0))
				{
					$this->body = trim($this->body);
					$this->body = str_replace("&quot;",'', $this->body);
					$this->body = str_replace("\n",'', $this->body);
					$original_size = strlen($this->body);
		/*			myerror_log("**************FULLBODY******************");
					myerror_log($this->body);
					myerror_log("***********************************");
					myerror_log("size is: ".$original_size);
					myerror_log("***********************************");
					//if ($_SERVER['log_level'] > 1) 
		*/			myerror_log("the body length going into GPRS stuff in response.php: ".$original_size);
						$muti = mb_strlen($this->body, 'UTF-8');
							
					myerror_log("the multi length is: ".$muti);		
							
					//$request->encoding = 'gzip';
					$heads = getallheaders();
					if ($range = $heads['RANGE'])
						;//
					else
					{
						myerror_log("ERROR!  no RANGE header sent, re-setting to default of bytes=0-1023");
						$range = 'bytes=0-1023';
					}
					$r = explode('=', $range);
					$range_value = $r[1];
					myerror_log("the range value from the printer is: ".$range_value);
					$max_memory = '1345'; // not sure what we're doing with this

					//$this->headers['Content-Range'] = 'bytes '.$range_value.'/1345';
					$rs = explode('-',$range_value);
					if ($range_value == '0-1023' )
					{
						myerror_log("in the range 0-1023");
						//$this->body = trim($this->body);
						$upper_range_value = '1023';
						//	$this->body = substr($this->body,0,1023);
						//if (strlen($this->body) > 975)
						if (strlen($this->body) > 1024)
						{
							$this->body = substr($this->body,0,1019)." ::xx";
							$upper_range_value = '1023';
							//$total_size = '975';
						}
						else
						{
							$upper_range_value = strlen($this->body)-1;
							//$total_size = strlen($this->body);
						}
						$total_size = $original_size; 
					} else if ($rs[0] == 0) {
						myerror_log("in the second block where range starts with 0");
						// we have a funny range like 0-109 
						$upper_range_value = $rs[1];
						//just need to trim to rs[1] 
						if (strlen($this->body) > $rs[1])
							$this->body = substr($this->body,0,$rs[1]);
						else
							$upper_range_value = strlen($this->body)-1;
					} else {
						//$start=$rs[0]-5;
						$start=$rs[0]-3;
						myerror_log("in the else block meaning we have a second part of the message");
						myerror_log("about to split message starting at character: ".$start);
						
						//first get header, find position of 2nd '*'
						//$pos = strpos($this->body, '*');
						//$pos = strpos($this->body, '*',$pos+1);
						//$the_message_header = substr($this->body,0,$pos+1);
						
						// determine if we need to split again
						myerror_log("the length of part 2 is: ".strlen(substr($this->body,$start)));
						//if (strlen(substr($this->body,$start)) > 970)
						if (strlen(substr($this->body,$start)) > 1024)
						{
							$upper_end = $rs[0]+1019;
							//need to subtract another 5
							//$start = $start-5;
							myerror_log("ok we have a REALLY BIG MESSAGE.  the second part is also over the limit split at $start ");
							// ok part 2 is large so we split again
							
							//$this->body =  $the_message_header.":: ::".substr($this->body,$start,970)."::cnt..";
							$this->body =  substr($this->body,$start,1019)." ::xx";
							$upper_range_value = ''.$upper_end;
						} else {
							// we're dropping two characters for some reason so we'll add them to the front
							myerror_log("in the last part of the message.  we will split at: ".$start);
							//$this->body = 'xx'.$this->body;
							//myerror_log("**********body to split**********");
							//myerror_log($this->body);
							//myerror_log("*********************************");
							
							$this->body = substr($this->body,$start);
							$upper_range_value = $original_size;
						}
						$total_size = $original_size;
						myerror_log("the total size is: ".$total_size);
					}
					//$upper_range_value = $upper_range_value-1;
					//$this->headers['Content-Range'] = 'bytes '.$rs[0].'-'.$upper_range_value.'/'.strlen($this->body);
					$this->headers['Content-Range'] = 'bytes '.$rs[0].'-'.$upper_range_value.'/'.$total_size;
					unset($this->headers['Etag']);
					unset($this->headers['Last-Modified']);
					$this->headers['Cache-Control'] = 'private';
				} 
			}
			if (substr_count($request->url,'/gprs/') > 0)
				myerror_log("gprs response length is: ".strlen($this->body));
			
			$this->headers['Content-Type'] = $mimetype;
			$this->headers['Content-Length'] = strlen($this->body);
            if (substr_count($request->url,'/gprs/') > 0) {
				logData($this->headers, "OutGoing GPRS Headers");		
			} else {
				logData($this->headers, "OutGoingHeaders",5);
			}
		}
	}
	
	/**
	 * Add the extra headers in the given response object to this response
	 * @param Response response
	 */
	function addExtraHeaders(&$response)
	{
		foreach ($response->headers as $headerName => $value) {
			if (!isset($this->headers[$headerName])) {
				$this->headers[$headerName] = $value;
			}
		}
		$this->statusCode = $response->statusCode;
	}
	
	/**
	 * Add content encoding headers and encode the response body
	 * @param str[] encodings The acceptable encodings
	 */
	function _doContentEncoding($encodings)
	{
		if (ini_get('zlib.output_compression') == 0) { // do nothing if PHP will do the compression for us
			foreach ($encodings as $encoding) {
				switch($encoding) {
				case 'gzip':
					$this->headers['Content-Encoding'] = 'gzip';
					$this->body = gzencode($this->body);
					return;
				case 'deflate':
					$this->headers['Content-Encoding'] = 'deflate';
					$this->body = gzdeflate($this->body);
					return;
				case 'compress':
					$this->headers['Content-Encoding'] = 'compress';
					$this->body = gzcompress($this->body);
					return;
				case 'identity':
					return;
				}
			}
		}
	}
	
	/**
	 * Set up the HTTP Basic auth headers
	 * @param str[] config
	 * @param Resource resource
	 */
	function sendBasicAuthHeader(&$config, &$resource)
	{
		$this->headers['WWW-Authenticate'] = 'Basic realm="'.$resource->getRealm($config['realm']).'"';
	}
	
	/**
	 * Set up the HTTP Digest auth headers
	 * @param str[] config
	 * @param Resource resource
	 */
	function sendDigestAuthHeader(&$config, &$resource)
	{
		if (!$config['clientAddress']) {
			$config['clientAddress'] = $_SERVER['REMOTE_ADDR'];
		}
		$this->headers['WWW-Authenticate'] = 'Digest '.
			'realm="'.$resource->getRealm($config['realm']).'", '.
			'domain="'.$resource->url.'", '.
			'qop=auth, '.
			'algorithm=MD5, '.
			'nonce="'.$resource->getNonce($config['privateKey'], $config['life'], $config['clientAddress']).'", '.
			'opaque="'.md5($config['opaque']).'"';
	}
	
	/**
	 * Set up the HTTP Cookie auth headers
	 * @param str[] config
	 * @param Resource resource
	 * @param str username
	 */
	function sendAuthCookie(&$config, &$resource, $username)
	{
		$hash = md5($username.$resource->getNonce(
			$config['privateKey'],
			$config['life'],
			$config['clientAddress']
		));
		$this->headers['Set-Cookie'] = 'Tonic='.$username.':'.$hash.'; path=/; expires='.date('l, d-M-y H:i:s T', time() + $config['life']);
	}
	
	function success()
	{
		return substr($this->statusCode, 0, 1) == '2';
	}
	
	function redirection()
	{
		return substr($this->statusCode, 0, 1) == '3';
	}
	
	function error()
	{
		return substr($this->statusCode, 0, 1) == '4' || substr($this->statusCode, 0, 1) == '5';
	}
	
	/**
	 * Get the status message for this responses status code
	 * @return str
	 */
	function _statusMessage()
	{
		return isset($this->messages[$this->statusCode])?$this->messages[$this->statusCode]:'Unknown';
	}
	
	/**
	 * Send the response to the client
	 * @param bool friendlyMimetypes
	 */
	function output($friendlyMimetypes = FALSE)
	{
		myerror_logging(5,"starting response->output");
		header('HTTP/1.0 '.$this->statusCode.' '.$this->_statusMessage());
		foreach ($this->headers as $header => $value) {
			if ($friendlyMimetypes && $header == 'Content-Type') {
				header($header.': text/plain; charset=UTF-8');
		/*	} else if ($header == 'Content-Length') {
 				myerror_log("do not set content length, let apache do it, takes care of hidden white space in PHP files"); */ 
  			} else {
				header($header.': '.$value);
			}
		}
//		if (isNotProd()) {
//		    header('Access-Control-Allow-Origin: *');
//		    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, PATCH, OPTIONS');
//            //header('Access-Control-Allow-Headers: X_SPLICKIT_CLIENT_ID,X_SPLICKIT_CLIENT_DEVICE,X_SPLICKIT_CLIENT');
//		    $headstring = strtolower('X_SPLICKIT_CLIENT_ID,X_SPLICKIT_CLIENT_DEVICE,X_SPLICKIT_CLIENT,HTTP_X_SPLICKIT_CLIENT_ID,HTTP_X_SPLICKIT_CLIENT_DEVICE,HTTP_X_SPLICKIT_CLIENT');
//            header('Access-Control-Allow-Headers: X_SPLICKIT_CLIENT_ID,X_SPLICKIT_CLIENT_DEVICE,X_SPLICKIT_CLIENT,HTTP_X_SPLICKIT_CLIENT_ID,HTTP_X_SPLICKIT_CLIENT_DEVICE,HTTP_X_SPLICKIT_CLIENT,'.$headstring);
//        }
		
		$_SERVER['request_time2'] = microtime(true);
		$request_elapsed = $_SERVER['request_time2']-$_SERVER['request_time1'];
		$url = $_SERVER['request_url'];
		
		myerror_logging(3,"Total time for global request: ".$_SERVER['request_url'].": ".$request_elapsed);
		myerror_logging(3,"Total time for global query wait: ".$_SERVER['TOTAL_DB_TIME']);
		
		if (substr_count($_SERVER['request_url'],'/messagemanager/') < 1 && substr_count($_SERVER['request_url'],'healthcheck') < 1) {
            $response_body = substr($this->body,0,5000);
            RequestTimesAdapter::createTimesRecord(getRawStamp(), $url, $_SERVER['REQUEST_METHOD'], $request_elapsed,0, 0,$_SERVER['request_body'],$response_body);
		}
		
		myerror_logging(3,"mimetype research Content-Type: ".$this->headers['Content-Type']);
		
		if ($this->body) {
			if (substr_count($_SERVER['REQUEST_URI'],'/gprs/') > 0) {
				$this->body = str_replace("\xe2\x84\xa2", '', $this->body);
				
				//myerror_log("did we strip: ".$this->body);
				//myerror_log("we are about to output a GRPS message in response.php");
			}
			myerror_logging(5,"RESPONDING WITH: ".$this->body);
			echo $this->body;
		} else {
			myerror_logging(3,"NO BODY TO OUTPUT, SEND EMPTY STRING");
			echo '';
		}
	}

	function getOutputAsText($friendlyMimetypes = FALSE)
	{
		if ($this->body) {
			return $this->body;
		}
	}
}
?>