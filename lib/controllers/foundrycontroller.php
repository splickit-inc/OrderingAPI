<?php

Class FoundryController extends MessageController
{

    var $importer;
    var $merchant_resource;
    var $merchant_foundry_info;

    protected $format = 'U';
    protected $format_name = 'foundry';

    function FoundryController($mt,$u,&$r,$l = 0)
    {
        parent::MessageController($mt,$u,$r,$l);

    }


    private function processCheckForMessagesRequest($merchant_id)
    {
        if ($message_resources = $this->getAvailablePuledMessageResourcesArrayByMerchantId($merchant_id)) {
            $response_body = "<SVRRESPONSE>2</SVRRESPONSE>";
        } else {
            // check for menu
            if ($this->merchant_resource->get_menu) {
                //$response_body = '<SVRRESPONSE REQTYPE="01" SITEID="'.$this->merchant_resource->alphanumeric_id.'" SVRREQ="1" PARM6="MENU EXTRACTOR FILTER PARAMETERS" >1</SVRRESPONSE>';
                $response_body = '<SVRRESPONSE REQTYPE="01" SITEID="'.$this->merchant_resource->alphanumeric_id.'" SVRREQ="1"  >1</SVRRESPONSE>';
                // now reset the flag
                $sql = "UPDATE Merchant_Foundry_Info_Maps SET get_menu = FALSE WHERE merchant_id = $merchant_id LIMIT 1";
                $mfima = new MerchantFoundryInfoMapsAdapter(getM());
                $mfima->_query($sql);

            } else {
                $response_body = "<SVRRESPONSE>1</SVRRESPONSE>";
            }
        }
        return $response_body;
//        $response = new Response(200);
//        $response->body = $response_body;
//        $response->output();
//        die;
    }

    static function sortByModifierItemPriorityDescending($a,$b) {
        return $a['modifier_item_priority']<$b['modifier_item_priority'];
    }


    public function populateMessageData($message_resource)
    {

            $resource = parent::populateMessageData($message_resource); // TODO: Change the autogenerated stub
            $this->merchant_foundry_info = MerchantFoundryInfoMapsAdapter::getMerchantFoundryInfoMap($message_resource->merchant_id);
            foreach ($resource->order_details as &$order_detail) {
                // get item modifier group maps
                $imgma = new ItemModifierGroupMapAdapter(getM());
                $imgm_records = $imgma->getRecords(['item_id'=>$order_detail['item_id'],'merchant_id'=>0]);
                $imgm_hash = createHashmapFromArrayOfArraysByFieldName($imgm_records,'modifier_group_id');
                $foundry_modifiers = [];
                foreach ($order_detail['order_detail_complete_modifier_list_no_holds'] as &$modifier) {
                    $s = explode('-',$modifier['external_id']);
                    $has_parent = false;
                    $parent_modifier = [];
                    if ($s[1]) {
                        $modifier['external_id'] = $s[1];
                        $e = explode(':',$s[0]);
                        $parent_modifier['external_modifier_group_id'] = $e[0];
                        $parent_modifier['external_id'] = $e[1];
                        $has_parent = true;
                    }
                    $e = explode(':',$modifier['external_id']);
                    if (isset($e[1])) {
                        $modifier['external_modifier_group_id'] = $e[0];
                        $modifier['external_id'] = $e[1];
                    } else {
                        $modifier['external_modifier_group_id'] = '';
                    }
                    $modifier_group_priority = $imgm_hash[$modifier['modifier_group_id']]['priority'];
                    $modifier['modifier_group_priority'] = $modifier_group_priority;
                    if ($has_parent) {
                        $parent_modifier['has_child'] = true;
                        $parent_modifier['modifier_group_priority'] = $modifier_group_priority;
                        $parent_modifier['modifier_item_priority'] = $modifier['modifier_item_priority']+1;
                        $parent_modifier['child'] = $modifier;
                        $foundry_modifiers[] = $parent_modifier;
                    } else {
                        $foundry_modifiers[] = $modifier;
                    }
                }
                array_multisort(array_column($foundry_modifiers, 'modifier_group_priority'), SORT_DESC,
                                array_column($foundry_modifiers, 'modifier_item_priority'),SORT_DESC, $foundry_modifiers);
                $order_detail['foundry_modifiers'] = $foundry_modifiers;
            }
            // cc info for tender_id
            $bc_adapter = new BalanceChangeAdapter(getM());
            $resource->set('tender_id',215); // default
            if ($bc_record = $bc_adapter->getAuthorizeRow($resource->order_id)) {
                $card_info = $bc_record['card_info'];
                myerror_log("card info retrieved from balance chance: ".$card_info,5);
                $s = explode('-',$card_info);
                $card_type = $s[0];
                $last_four = $s[1];
                $resource->set('last_four',$last_four);
                // now set tender_id from brand card type combination
                $this->setTenderIdOnResource($card_type,$resource);
            } else if (isUserStoreTesterLevelOrBetter($resource->user_id)) {
                $resource->set('last_four','1111');
                $this->setTenderIdOnResource('visa',$resource);
            }

        // do promo stuff
        $resource->set('foundry_promo_id',$this->merchant_foundry_info['promo_id']);
        $resource->set('brand_order_mode',3);
        if ($resource->merchant['brand_id'] == 484) {
            $resource->brand_order_mode = 5;
        }
        return $resource;
    }

    private function setTenderIdOnResource($card_type,&$resource)
    {
        $foundry_brand_card_tender_ids_adapter = new FoundryBrandCardTenderIdsAdapter(getM());
        if ($tender_id = $foundry_brand_card_tender_ids_adapter->getTenderIdFromBrandAndCardType($resource->brand_id,$card_type)) {
            $resource->tender_id = $tender_id;
        }
    }

    public function doExceptions($modifiers)
    {
        return $modifiers;
    }

    public function setComboMealItemForTemplate(&$order_item,$external_id,$main_item_id)
    {
        $r = explode('-',$external_id);
        $order_item['external_id'] = $r[0];
        if ($r[1]) {
            $order_item['group_id'] = $r[1];
            $order_item['main_item_id'] = $main_item_id;
            $order_item['exception_tag'] = 'COMBOMODITEM';
        }
    }

    public function getOrderIdFromFoundryResponsePayload()
    {
        if ($submitted_order_id = $this->request->data['CHECKRESPONSES']['ADDCHECK']['@attributes']['ORDERID'][0]) {
            return $submitted_order_id;
        } else {
            myerror_log("could not extract order id from foundry post payload");
            logData($this->request->data,"foundry payload data");
            return 888888888888;
        }
    }

    public function isCallBackSuccessfull($request_data)
    {
        return $request_data['ERRORS']['@attributes']['COUNT'][0] == 0;
    }

    function setViewed(&$message_resource)
    {
        $message_resource->viewed = 'N';
        return true;
    }


    public function pullNextMessageResourceByMerchant($alphanumeric_id)
    {
        myerror_log("starting foundry pull with request method: ".strtoupper($this->request->method),5);
        if (strtoupper($this->request->method) == 'POST') {
            myerror_log("OK we have a foundry post");
            //first determine if this is a call back or a menu post
            $get_string_data = $this->request->_parseGETString();
            myerror_log("the get data string: $get_string_data");
            if ($get_string_data['reqtype'] == '04') {
                // its a call back
                $order_id = $this->getOrderIdFromFoundryResponsePayload();
                $options[TONIC_FIND_BY_METADATA]['order_id'] = $order_id;
                $options[TONIC_FIND_BY_METADATA]['message_format'] = array("LIKE"=>'U%');
                if ($order_message_resource = Resource::find(new MerchantMessageHistoryAdapter($m),NULL,$options)) {
                    if ($this->isCallBackSuccessfull($this->request->data)) {
                        $viewed = 'V';
                        $order_status = 'E';
                    } else {
                        $viewed = 'F';
                        $order_status = 'O';
                    }
                    $order_message_resource->response = $this->request->body;
                    $order_message_resource->viewed = $viewed;
                    $order_message_resource->save();
                    $this->updateOrderStatus($order_status,$order_id);
                } else {
                    myerror_log("COULD NOT FIND ORDER MESSAGE MATCHING ORDER ID: ".$order_id);
                    $this->has_messaging_error = true;
                    $this->error_code = 422;
                    $this->error_message = "Order call back not processed. NO matching order id";
                }
            } else if (isset($get_string_data['reqtype'])) {
                myerror_log("Unrecognized POST reqtype=".$get_string_data['reqtype']);
                $this->has_messaging_error = true;
                $this->error_code = 422;
                $this->error_message = "Unrecognized POST reqtype=".$get_string_data['reqtype'];
            }
            return null;
        }  else if (strtoupper($this->request->method) == 'PUT') {
                myerror_log("WE HAVE A MENU UPLOAD!!!");
                $external_id = $this->data['@attributes']['LOCATIONID'];
                $merchant_resource = MerchantAdapter::getMerchantResourceFromAlphaNumeric($alphanumeric_id);
                //logData($merchant_resource->getDataFieldsReally(),"MERCHANT");
                $fi = new FoundryImporter($merchant_resource);
                myerror_log("we have the importer");
                $fi->importMenuFromRequest($this->request);
                $this->importer = $fi;
                return null;
        }
        if ($alphanumeric_id == 0 || $alphanumeric_id == null) {
            $alphanumeric_id = $this->data['siteid'];
        }
        if ($merchant_resource = $this->getMerchantWithFoundryInfoFromMerchantAlphanumeric($alphanumeric_id)) {
            $this->merchant_resource = $merchant_resource;
            DeviceCallInHistoryAdapter::recordPullCallIn($merchant_resource->merchant_id,$this->format);
            if ($this->data['reqtype'] == '01') {
                // we are checking for ready messages only
                $response_body = $this->processCheckForMessagesRequest($merchant_resource->merchant_id);
                $resource = new Resource();
                $resource->message_text = $response_body;
                $resource->_representation = '/utility_templates/static_message_no_new_line_at_end.txt';
                return $resource;
            }
            if ($message_resource = parent::pullNextMessageResourceByMerchant($merchant_resource->merchant_id)) {
                $resource = $this->prepMessageForSending($message_resource);
                $this->message_resource->message_text = cleanUpDoubleSpacesCRLFTFromString($resource->message_text);
                return $resource;
            }
        } else {
            myerror_log("SERIOUS ERROR IN FOUNDRY CONTROLLER!  no matching merchant for submitted alphanumeric id: ".$alphanumeric_id);
            $this->error_message = "No matching merchant for: $alphanumeric_id";
            $this->error_code = 422;
            $this->has_messaging_error = true;
        }
        return false;
    }

    function getMainMessageSuccessOrderStatus()
    {
        return 'O';
    }

    function getMerchantWithFoundryInfoFromMerchantAlphanumeric($alphanumeric_id)
    {
        //$sql = "SELECT a.*,b.get_menu FROM Merchant a JOIN Merchant_Foundry_Info_Maps"
        $options[TONIC_FIND_BY_METADATA]['alphanumeric_id'] = $alphanumeric_id;
        $options[TONIC_JOIN_STATEMENT] = " JOIN Merchant_Foundry_Info_Maps ON Merchant.merchant_id = Merchant_Foundry_Info_Maps.merchant_id ";
        $options[TONIC_FIND_STATIC_FIELD] = " Merchant_Foundry_Info_Maps.get_menu as get_menu";
        $merchant_adapter = new MerchantAdapter($m);
        return Resource::find($merchant_adapter,'',$options);


    }

    protected function send($message_body)
    {
        myerror_log("foundry sending with body: ".cleanUpCRLFTFromString($message_body));

//must build how to send with foundry the below code is an example
//        $foundry_service = new FoundryService();
//        if ($response = $foundry_service->send($message_body)) {
//            $this->message_resource->message_text = $message_body;
//            $this->message_resource->response = $response['raw_result'];
//            return $response;
//        }
        return true;
    }

}

class NoMerchantFoundryLocationException extends Exception
{
    public function __construct($merchant_id) {
        parent::__construct("No Foundry location data for merchant_id: $merchant_id", 100);
    }
}

?>